// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package benchmark


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x3d\x4c\x23\x47\x14\x7e\xbb\x36\xf6\x9a\x9f\x40\x7e\x9c\x10\xcb" +
	"\x51\x28\x52\xd0\xc4\x90\x40\x81\x94\x14\x16\xca\x5f\x41\x61\x45\x89\xe4\x48\x89\x16\xb3\x2c\xb2\xc1\x7f\x78\x17" +
	"\x62\xe3\x28\xa1\x41\x42\x54\x34\x91\x90\xd2\x40\x90\x22\xaa\x28\x1d\x74\x8e\x94\x28\xa1\xa4\x74\x41\xe1\x28\x52" +
	"\x82\x74\x14\x3e\x5d\x71\xe8\x0a\xe6\x34\x33\x6f\x6f\x67\xc7\xbb\xc0\xe9\x5a\x9e\x64\x3e\xbf\xb7\xdf\x9b\xf7\x33" +
	"\x6f\xc6\xcb\x0f\x1f\xcf\x7d\xa2\x2a\x0a\x38\xa2\xc0\x63\x70\x35\x57\x3a\x03\xee\xf7\x34\xfe\x1d\x01\x05\x8e\xd1" +
	"\xf6\x23\x62\xeb\x75\x8e\x5b\x00\xf0\x12\x00\x34\xfb\x3b\x84\xea\x0d\x63\x8f\xd9\xa3\x21\x00\x8d\xf2\x0e\x38\x2f" +
	"\xaa\x00\x5c\x11\x42\x8e\x55\x6e\xa7\x7e\x61\xca\x3f\xb8\x62\x7e\x71\xe5\x2d\xc6\x3b\xc6\xa4\x8c\xc4\x39\xb3\xb7" +
	"\x7e\x46\x7f\x15\xe0\x9c\x10\x32\x2a\x25\xbd\xc5\x6a\x01\x88\x43\x9c\xf3\x50\x17\xe3\x5e\x08\x71\x5b\x21\xd7\x8f" +
	"\xc7\xbf\xe0\x79\x1f\xf2\x3c\x86\x5f\xc5\xfa\x7e\x41\xff\x08\x40\x97\x10\xd2\xca\x71\x5d\xce\x5f\xcc\xaf\xe3\x93" +
	"\x5f\xcb\x40\xbf\xb0\x1b\x57\xa5\xba\xd4\xcf\xc6\x1b\x59\xce\x17\xf2\x26\x98\x37\xab\xc7\xf2\xe6\xed\xf4\xbd\x15" +
	"\xe1\xf6\xe6\x72\x97\xf7\x2b\xcf\xf5\x6f\x35\x80\x31\xda\xc7\x9d\x4b\x22\xf6\xb5\x99\xe0\xfb\xd4\x4c\xb4\x11\xcf" +
	"\x10\x4f\x19\x5a\x89\xbf\x18\xae\x24\xfe\x24\x7c\x1f\x7e\xc7\xe7\x27\x88\xbf\x21\x1e\x21\xee\x23\xee\x21\xee\x22" +
	"\x6e\x23\x6e\x22\xd6\x11\xab\x88\x79\xc4\x79\xc4\x2c\x62\x06\xf1\x33\xc4\x34\xe2\x0c\xe2\x24\xe2\x38\xe2\x18\xe2" +
	"\x28\xe2\x08\xa2\x86\x08\x88\x57\xd7\x1c\xbb\x88\x17\x88\x1d\x86\x4e\x7f\xe9\xdc\xca\xf3\x73\xea\x33\xb7\x22\x3f" +
	"\x26\xf1\xcf\x6e\xe1\xbf\x2c\xf1\xdb\xb7\xf0\xdf\x94\xf8\x9d\x6b\x77\x2e\x1c\x7e\x34\x0a\x90\x90\x78\xff\x20\xef" +
	"\x3f\x9f\xf9\x59\x3d\xe0\x75\xc7\x15\x95\xcd\xe3\x97\x8a\xca\xd6\x33\x76\xf8\x7c\x18\xcb\x1c\xc5\x73\x40\xf3\x6c" +
	"\x1d\xba\x79\x9d\xfa\xcd\xfb\x82\xff\xbc\x8b\xe7\xe4\x52\x5a\x87\xd6\x23\xaf\x73\x93\x7f\xf7\x05\xce\x59\x0c\xeb" +
	"\xff\x9f\x2a\x23\x70\x2f\x82\xd0\xde\x68\xf8\xb9\xef\x8d\x57\x62\xd8\x12\xd6\x96\xfb\xde\x78\xe4\xd3\xcc\x1c\x5c" +
	"\x13\xc2\xee\x0b\xa7\x35\xca\xc6\xe7\xa0\x7d\x37\xa0\x0c\x02\xc0\x28\x7e\x1c\x11\xdb\x97\x04\x80\x69\x41\xcf\x48" +
	"\xe7\x9a\x3e\xff\x42\xd0\xf3\xa1\xbb\xe5\x74\xce\xce\xf9\x43\x22\xdb\xf9\x2b\x50\x18\xd2\x52\x9c\x27\xec\x6f\x04" +
	"\x76\x55\xaf\xfd\x11\xda\xf7\xd4\xde\x18\x21\xf0\x4f\x26\x04\xe1\x00\x7b\xa4\xc7\xb6\x0a\xf4\xf7\xc0\x7d\xe9\x72" +
	"\x3c\x3f\x60\xf6\xc1\x1e\x7b\x84\xd9\xb5\x67\xf6\x24\xd6\xf1\x2e\xb3\xc7\x7a\xec\x1f\x01\xc0\x2b\x42\x5c\xa7\x7f" +
	"\x6f\x33\x7e\x7f\x0f\xff\x57\xc6\x77\xf3\x77\xf6\x63\x9b\xd9\xdd\x7a\x9d\x3d\xac\x23\x52\x1a\x5d\xcd\xb9\x97\x29" +
	"\xd0\xaa\x4e\x54\x57\x1f\xe2\x4d\xf0\xf0\x27\x43\x5e\x7e\x52\x58\xaf\x0f\x00\x66\x04\x9d\x56\x91\x15\x74\xfa\xae" +
	"\x07\xa5\x5c\xd5\x9a\x30\x2a\xb5\xca\x9a\x5d\x28\x9b\xba\x61\xd7\x21\x65\x9b\x75\x9b\x3f\xb0\xaa\xb9\xb2\x5e\x58" +
	"\xb4\x64\x1a\x35\xe9\xeb\x66\xcd\x2a\x54\xca\xb0\x52\xad\x55\x16\x4c\x5d\x5f\xac\xe8\xeb\x4b\x96\x5e\xa8\x18\x76" +
	"\x11\x52\x35\xb3\xc8\x1f\x4c\x78\xec\x7a\xb1\x60\x98\x65\xcb\x64\x84\x94\x99\xd7\x97\x6a\xb9\x92\x09\x6b\x7c\x0d" +
	"\xb3\x54\xb5\x1b\x3a\xfb\x8e\xa6\x89\x5e\x93\x6e\x54\x4a\xd5\xa2\x59\x47\x23\x5d\x08\xb9\xde\x07\xa5\x5c\xa1\x9c" +
	"\x32\x20\x65\xd9\x35\x3b\xb7\x00\x29\xab\x51\xa2\x38\x37\x3b\xfb\xbe\x3e\xcd\x61\x8a\xc2\x7b\xfa\x54\xcf\x5c\x3d" +
	"\xaf\xfc\xeb\x6e\x8d\x47\xda\x38\x22\x9a\x74\x5e\xe4\xff\x1d\x5e\x13\xf6\x48\x94\x74\x40\x3c\xf9\x84\xfc\x74\x8b" +
	"\xbf\x7c\xe5\x6a\x92\xfe\x77\x80\x7f\xc6\x41\xe5\x66\xff\x3f\xf0\x8e\x97\x25\x8b\xf5\x8f\xa1\x3e\x8c\xb9\x6b\x52" +
	"\x5e\xdf\x04\xc4\xdf\xc7\xb8\xf2\xbd\x25\xc7\xff\x2a\x20\x7e\x1d\xe3\x4f\x0a\xf1\x23\x3e\xf1\x15\xfc\xc8\x7b\xa8" +
	"\xf5\x71\x4c\x4a\xf5\xcb\xfd\x1f\x0f\xf0\x7f\x27\x72\x37\xff\x44\x80\x7f\x3a\x7a\x37\xff\x5a\x80\xff\xd7\x9a\x3f" +
	"\x5f\x9e\xbf\x0f\x03\xfc\xe7\x03\xfc\x65\xfd\x7b\xf4\x97\xaf\xf9\x3c\xfa\x57\x25\xbb\xbc\x7f\x1b\x01\xfb\x77\xe4" +
	"\xb3\x7f\x43\x3e\xfb\xf7\xc0\x27\x36\x95\x36\x12\x37\x85\x7b\x55\x13\xfc\x9d\xdf\xd5\xa7\x01\x00\x00\xff\xff\xc5" +
	"\xc1\xa5\x3f\xe0\x0f\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 4064,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1614537324, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
